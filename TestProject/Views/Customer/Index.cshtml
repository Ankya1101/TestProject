@model List<TestProject.Models.Customer>

@{
    ViewData["Title"] = "Customer List";
}
<style>
    .container {
        max-width: 1000px;
        margin: 20px auto;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .customer-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
    }

        .customer-table th, .customer-table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

        .customer-table th {
            background-color: #f2f2f2;
        }

    form {
        display: flex;
        flex-direction: column;
        max-width: 400px;
        margin-top: 20px;
    }

        form label {
            font-weight: bold;
        }

        form input {
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        form button {
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            form button:hover {
                background-color: #45a049;
            }

    h1, h2 {
        color: #333;
    }

</style>

@* 

<div class="container">
    <h1>Customer List</h1>

    <table class="customer-table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Count > 0)
            {
                @foreach (var customer in Model)
                {
                    <tr>
                        <td>@customer.CustomerID</td>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.PhoneNumber</td>
                    </tr>
                }
            }
            
        </tbody>
    </table>

    <h2>Add New Customers</h2>

    <!-- Form to add multiple customers -->
    <h2>Add New Customers</h2>
    <form asp-action="SetData" method="post" id="addCustomerForm">
        <div id="customerForms">
            <!-- Initially one customer form -->
            <div class="customer-form">
                <h3>Customer</h3>

                <label for="CustomerID">Customer ID:</label>
                <input type="text" name="CustomerList[0].CustomerID" required /><br><br>

                <label for="FirstName">First Name:</label>
                <input type="text" name="CustomerList[0].FirstName" required /><br><br>

                <label for="LastName">Last Name:</label>
                <input type="text" name="CustomerList[0].LastName" required /><br><br>

                <label for="PhoneNumber">Phone Number:</label>
                <input type="text" name="CustomerList[0].PhoneNumber" required /><br><br>
            </div>
        </div>

        <button type="button" onclick="addCustomerForm()">Add Customer</button><br><br>
        <button type="submit">Submit Customers</button>
    </form>
</div>


<script>
    // Function to add new customer form fields dynamically
    function addCustomerForm() {
        var formContainer = document.getElementById("customerForms");
        var newCustomerForm = document.createElement("div");
        newCustomerForm.classList.add("customer-form");

        newCustomerForm.innerHTML = `
            <h3>Customer</h3>
            <label for="CustomerID">Customer ID:</label>
            <input type="text" name="CustomerList[${formContainer.children.length}].CustomerID" required /><br><br>

            <label for="FirstName">First Name:</label>
            <input type="text" name="CustomerList[${formContainer.children.length}].FirstName" required /><br><br>

            <label for="LastName">Last Name:</label>
            <input type="text" name="CustomerList[${formContainer.children.length}].LastName" required /><br><br>

            <label for="PhoneNumber">Phone Number:</label>
            <input type="text" name="CustomerList[${formContainer.children.length}].PhoneNumber" required /><br><br>
        `;
        formContainer.appendChild(newCustomerForm);
    }
</script> *@

<div class="container">
    <h1>Customer List</h1>

    <!-- Table to show existing customers -->
    <table class="customer-table">
        <thead>
            <tr>
                <th>Customer ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Phone Number</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Count > 0)
            {
                @foreach (var customer in Model)
                {
                    <tr>
                        <td>@customer.CustomerID</td>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.PhoneNumber</td>
                    </tr>
                }
            }
            
        </tbody>
    </table>

    <!-- Form to add customers -->
    <h2>Add New Customers</h2>
    <form asp-action="SetData" method="post" id="addCustomerForm" onsubmit="return validateForm()">
        <div id="customerForms">
            <!-- Initially one customer form -->
            <div class="customer-form">
                <h3>Customer 1</h3>

                <label for="CustomerID">Customer ID:</label>
                <input type="text" name="CustomerList[0].CustomerID" required /><br><br>

                <label for="FirstName">First Name:</label>
                <input type="text" name="CustomerList[0].FirstName" required /><br><br>

                <label for="LastName">Last Name:</label>
                <input type="text" name="CustomerList[0].LastName" required /><br><br>

                <label for="PhoneNumber">Phone Number:</label>
                <input type="text" name="CustomerList[0].PhoneNumber" required /><br><br>

                <button type="button" class="deleteButton" onclick="deleteCustomerForm(this)">Delete Customer</button>
                <hr>
            </div>
        </div>

        <button type="button" onclick="addCustomerForm()">Add Customer</button><br><br>
        <button type="submit">Submit Customers</button>
    </form>
</div>

<script>
    // Simple validation to ensure at least one customer form is present
    function validateForm() {
        var formContainer = document.getElementById("customerForms");
        if (formContainer.children.length === 0) {
            alert("Please add at least one customer.");
            return false;
        }
        return true;
    }
</script>

<script>
    // Function to add new customer form fields dynamically
    function addCustomerForm() {
        var formContainer = document.getElementById("customerForms");
        var newCustomerForm = document.createElement("div");
        newCustomerForm.classList.add("customer-form");

        var customerIndex = formContainer.children.length;
        newCustomerForm.innerHTML = `
                    <h3>Customer ${customerIndex + 1}</h3>
                    <label for="CustomerID">Customer ID:</label>
                    <input type="text" name="CustomerList[${customerIndex}].CustomerID" required /><br><br>

                    <label for="FirstName">First Name:</label>
                    <input type="text" name="CustomerList[${customerIndex}].FirstName" required /><br><br>

                    <label for="LastName">Last Name:</label>
                    <input type="text" name="CustomerList[${customerIndex}].LastName" required /><br><br>

                    <label for="PhoneNumber">Phone Number:</label>
                    <input type="text" name="CustomerList[${customerIndex}].PhoneNumber" required /><br><br>

                    <button type="button" class="deleteButton" onclick="deleteCustomerForm(this)">Delete Customer</button>
                    <hr>
                `;
        formContainer.appendChild(newCustomerForm);
    }

    // Function to delete a customer form
    function deleteCustomerForm(button) {
        var formContainer = document.getElementById("customerForms");
        var customerForm = button.parentElement;
        formContainer.removeChild(customerForm);
        updateCustomerIndices(); // Recalculate indices after deletion
    }

    // Function to update the indices of customer forms after deletion
    function updateCustomerIndices() {
        var formContainer = document.getElementById("customerForms");
        var forms = formContainer.getElementsByClassName("customer-form");
        for (var i = 0; i < forms.length; i++) {
            var customerForm = forms[i];
            customerForm.querySelectorAll('input').forEach(function (input, index) {
                var name = input.name;
                var updatedName = name.replace(/\[\d+\]/, "[" + i + "]");
                input.name = updatedName;
            });
        }
    }
</script>